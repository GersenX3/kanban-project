services:
  # Servicio de la API (tu configuración existente)
  kanban-api-auth:
    build: ./kanban-api-auth
    container_name: kanban-api-auth
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: "postgresql://authuser:supersecretpassword@postgres-auth/authdb"
      DB_HOST: "postgres-auth"
      DB_USER: "authuser"
      DB_NAME: "authdb"
      DB_PASSWORD: "supersecretpassword"
    depends_on:
      postgres-auth:
        condition: service_healthy
    restart: on-failure
    networks:
      - kanban-network

  # Servicio de React UI (Producción con nginx)
  kanban-ui:
    build:
      context: ./kanban-ui # Ajusta esta ruta según tu estructura
      dockerfile: Dockerfile
    container_name: kanban-ui
    ports:
      - "3000:80" # Puerto 3000 externo, 80 interno (nginx)
    depends_on:
      - kanban-api-auth
    restart: on-failure
    networks:
      - kanban-network

  # Base de datos (tu configuración existente)
  postgres-auth:
    image: postgres:13
    container_name: postgres-auth
    environment:
      POSTGRES_USER: "authuser"
      POSTGRES_PASSWORD: "supersecretpassword"
      POSTGRES_DB: "authdb"
    volumes:
      - auth-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d authdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kanban-network

  # Nuevo servicio Nginx (punto de entrada)
  nginx:
    image: nginx:1.25.3
    container_name: kanban-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80" # Expone el puerto 80 del host al 80 del contenedor
    depends_on:
      - kanban-ui
      - kanban-api-auth
    networks:
      - kanban-network

volumes:
  auth-data:

networks:
  kanban-network:
    driver: bridge
